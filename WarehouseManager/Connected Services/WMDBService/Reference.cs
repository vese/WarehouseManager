//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WarehouseManager.WMDBService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Site", Namespace="http://schemas.datacontract.org/2004/07/WMDBService")]
    [System.SerializableAttribute()]
    public partial class Site : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EmptyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Capacity {
            get {
                return this.CapacityField;
            }
            set {
                if ((this.CapacityField.Equals(value) != true)) {
                    this.CapacityField = value;
                    this.RaisePropertyChanged("Capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Empty {
            get {
                return this.EmptyField;
            }
            set {
                if ((this.EmptyField.Equals(value) != true)) {
                    this.EmptyField = value;
                    this.RaisePropertyChanged("Empty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Hangar", Namespace="http://schemas.datacontract.org/2004/07/WMDBService")]
    [System.SerializableAttribute()]
    public partial class Hangar : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FullnessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SiteIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Capacity {
            get {
                return this.CapacityField;
            }
            set {
                if ((this.CapacityField.Equals(value) != true)) {
                    this.CapacityField = value;
                    this.RaisePropertyChanged("Capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Fullness {
            get {
                return this.FullnessField;
            }
            set {
                if ((this.FullnessField.Equals(value) != true)) {
                    this.FullnessField = value;
                    this.RaisePropertyChanged("Fullness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SiteId {
            get {
                return this.SiteIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteIdField, value) != true)) {
                    this.SiteIdField = value;
                    this.RaisePropertyChanged("SiteId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WMDBService.IWMDBService")]
    public interface IWMDBService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/GetAllSites", ReplyAction="http://tempuri.org/IWMDBService/GetAllSitesResponse")]
        WarehouseManager.WMDBService.Site[] GetAllSites();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/GetAllSites", ReplyAction="http://tempuri.org/IWMDBService/GetAllSitesResponse")]
        System.Threading.Tasks.Task<WarehouseManager.WMDBService.Site[]> GetAllSitesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/GetSites", ReplyAction="http://tempuri.org/IWMDBService/GetSitesResponse")]
        WarehouseManager.WMDBService.Site[] GetSites(bool empty, bool full);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/GetSites", ReplyAction="http://tempuri.org/IWMDBService/GetSitesResponse")]
        System.Threading.Tasks.Task<WarehouseManager.WMDBService.Site[]> GetSitesAsync(bool empty, bool full);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/SiteExists", ReplyAction="http://tempuri.org/IWMDBService/SiteExistsResponse")]
        bool SiteExists(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/SiteExists", ReplyAction="http://tempuri.org/IWMDBService/SiteExistsResponse")]
        System.Threading.Tasks.Task<bool> SiteExistsAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/GetAllHangars", ReplyAction="http://tempuri.org/IWMDBService/GetAllHangarsResponse")]
        WarehouseManager.WMDBService.Hangar[] GetAllHangars(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/GetAllHangars", ReplyAction="http://tempuri.org/IWMDBService/GetAllHangarsResponse")]
        System.Threading.Tasks.Task<WarehouseManager.WMDBService.Hangar[]> GetAllHangarsAsync(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/GetHangars", ReplyAction="http://tempuri.org/IWMDBService/GetHangarsResponse")]
        WarehouseManager.WMDBService.Hangar[] GetHangars(string siteId, bool empty, bool full);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/GetHangars", ReplyAction="http://tempuri.org/IWMDBService/GetHangarsResponse")]
        System.Threading.Tasks.Task<WarehouseManager.WMDBService.Hangar[]> GetHangarsAsync(string siteId, bool empty, bool full);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/ModifyHangar", ReplyAction="http://tempuri.org/IWMDBService/ModifyHangarResponse")]
        bool ModifyHangar(string id, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/ModifyHangar", ReplyAction="http://tempuri.org/IWMDBService/ModifyHangarResponse")]
        System.Threading.Tasks.Task<bool> ModifyHangarAsync(string id, int N);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/GetFreePlacesCount", ReplyAction="http://tempuri.org/IWMDBService/GetFreePlacesCountResponse")]
        int GetFreePlacesCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWMDBService/GetFreePlacesCount", ReplyAction="http://tempuri.org/IWMDBService/GetFreePlacesCountResponse")]
        System.Threading.Tasks.Task<int> GetFreePlacesCountAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWMDBServiceChannel : WarehouseManager.WMDBService.IWMDBService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WMDBServiceClient : System.ServiceModel.ClientBase<WarehouseManager.WMDBService.IWMDBService>, WarehouseManager.WMDBService.IWMDBService {
        
        public WMDBServiceClient() {
        }
        
        public WMDBServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WMDBServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WMDBServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WMDBServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WarehouseManager.WMDBService.Site[] GetAllSites() {
            return base.Channel.GetAllSites();
        }
        
        public System.Threading.Tasks.Task<WarehouseManager.WMDBService.Site[]> GetAllSitesAsync() {
            return base.Channel.GetAllSitesAsync();
        }
        
        public WarehouseManager.WMDBService.Site[] GetSites(bool empty, bool full) {
            return base.Channel.GetSites(empty, full);
        }
        
        public System.Threading.Tasks.Task<WarehouseManager.WMDBService.Site[]> GetSitesAsync(bool empty, bool full) {
            return base.Channel.GetSitesAsync(empty, full);
        }
        
        public bool SiteExists(string id) {
            return base.Channel.SiteExists(id);
        }
        
        public System.Threading.Tasks.Task<bool> SiteExistsAsync(string id) {
            return base.Channel.SiteExistsAsync(id);
        }
        
        public WarehouseManager.WMDBService.Hangar[] GetAllHangars(string siteId) {
            return base.Channel.GetAllHangars(siteId);
        }
        
        public System.Threading.Tasks.Task<WarehouseManager.WMDBService.Hangar[]> GetAllHangarsAsync(string siteId) {
            return base.Channel.GetAllHangarsAsync(siteId);
        }
        
        public WarehouseManager.WMDBService.Hangar[] GetHangars(string siteId, bool empty, bool full) {
            return base.Channel.GetHangars(siteId, empty, full);
        }
        
        public System.Threading.Tasks.Task<WarehouseManager.WMDBService.Hangar[]> GetHangarsAsync(string siteId, bool empty, bool full) {
            return base.Channel.GetHangarsAsync(siteId, empty, full);
        }
        
        public bool ModifyHangar(string id, int N) {
            return base.Channel.ModifyHangar(id, N);
        }
        
        public System.Threading.Tasks.Task<bool> ModifyHangarAsync(string id, int N) {
            return base.Channel.ModifyHangarAsync(id, N);
        }
        
        public int GetFreePlacesCount() {
            return base.Channel.GetFreePlacesCount();
        }
        
        public System.Threading.Tasks.Task<int> GetFreePlacesCountAsync() {
            return base.Channel.GetFreePlacesCountAsync();
        }
    }
}
